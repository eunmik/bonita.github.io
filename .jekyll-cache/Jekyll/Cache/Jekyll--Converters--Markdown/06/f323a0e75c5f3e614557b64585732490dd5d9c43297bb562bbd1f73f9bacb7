I"Ȉ<h1 id="table-of-contents">Table of contents</h1>

<ul>
  <li><a href="#---">오류 코드보다 예외를 사용하라</a></li>
  <li><a href="#try-catch-finally---">Try-Catch-Finally 문 부터 작성하라</a></li>
  <li><a href="#unchecked--">미확인(unchecked) 예외를 사용하라</a></li>
  <li><a href="#--">예외에 의미를 제공하라</a></li>
  <li><a href="#----">호출자를 고려해 예외 클래스를 정의해라</a></li>
  <li><a href="#--">정상 흐름을 정의하라.</a></li>
  <li><a href="#null--">null을 반환하지 마라</a></li>
  <li><a href="#null--">null을 전환하지 마라</a></li>
</ul>

<p>예외 처리에 대해 알아보던 중 Clean Code라는 책에 예외 처리하는 구문이 정리된 블로그를 몇개 발견했다. 다음엔 내가 책 사서 다 읽고 정리해야지!!</p>

<h2 id="오류-코드보다-예외를-사용하라">오류 코드보다 예외를 사용하라</h2>

<p>오류 코드를 받아 처리 로직을 추가하는 것 보다 오류가 발생하면 예외를 던지는게 좋다.</p>

<p>bad👎 : 함수를 호출한 즉시 오류를 확인하지 않으면 문제가 발생할 확률이 높음</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeviceController</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendShuitDown</span><span class="o">(){</span>
		<span class="nc">DeviceHandle</span> <span class="n">handle</span> <span class="o">=</span> <span class="n">getHandle</span><span class="o">(</span><span class="no">DEV1</span><span class="o">);</span> 
		<span class="k">if</span><span class="o">(</span><span class="n">handle</span> <span class="o">!=</span> <span class="nc">DeviceHandle</span><span class="o">.</span><span class="na">INVALID</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">retreiveDeviceRecord</span><span class="o">(</span><span class="n">handle</span><span class="o">);</span>
			<span class="k">if</span><span class="o">(</span><span class="n">record</span><span class="o">.</span><span class="na">getStatus</span><span class="o">()</span> <span class="o">!=</span> <span class="no">DEVICE_SUSPEND</span><span class="o">){</span>
				<span class="n">pauseDevice</span><span class="o">(</span><span class="n">handle</span><span class="o">);</span> 
				<span class="o">...</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"Device suspend."</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"Invalid handle for: "</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Good👍 : 오류가 발생하면 예외를 던지는 편이 낫다. 그러면 호출자 코드가 더 깔끔해진다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeviceController</span><span class="o">{</span>
	<span class="o">...</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendShutDown</span><span class="o">(){</span>
		<span class="k">try</span><span class="o">{</span>
			<span class="n">tryToShutDown</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">DeviceShutDownError</span> <span class="n">e</span><span class="o">){</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">tryToShutDown</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">DeviceShutDownError</span> <span class="o">{</span>
		<span class="nc">DeviceHandle</span> <span class="n">handle</span> <span class="o">=</span> <span class="n">getHandle</span><span class="o">(</span><span class="no">DEV1</span><span class="o">);</span>
		<span class="nc">DeviceHandle</span> <span class="n">recrod</span> <span class="o">=</span> <span class="n">retrieveDeviceRecord</span><span class="o">(</span><span class="n">handle</span><span class="o">);</span> 
		
		<span class="n">pauseDevice</span><span class="o">(</span><span class="n">handle</span><span class="o">);</span>
		<span class="o">...</span>
	<span class="o">}</span>
	
	<span class="kd">private</span> <span class="nc">DeviceHandle</span> <span class="nf">getHandle</span><span class="o">(</span><span class="nc">DeviceID</span> <span class="n">id</span><span class="o">){</span>
		<span class="o">...</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">DeviceShutDownError</span><span class="o">(</span><span class="s">"Invalid handle for: "</span><span class="o">);</span>
		<span class="o">...</span>
	<span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="try-catch-finally-문-부터-작성하라">Try-Catch-Finally 문 부터 작성하라</h2>

<p>try-catch-finally 문으로 시작하면 try 블록에서 무슨일이 생기는지 호출자가 기대하는 상태를 정의하기 쉬워진다.</p>

<p>try문은 transaction처럼 동작하는 실행코드로, catch문은 try문에 관계없이 프로그램을 일관적인 상태로 유지하도록 한다.</p>

<h3 id="step-1">Step 1</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">// Step 1: StorageException을 던지지 않으므로 이 테스트는 실패한다.</span>

<span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="nc">StorageException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">retrieveSectionShouldThrowOnInvalidFileName</span><span class="o">()</span> <span class="o">{</span>
  <span class="n">sectionStore</span><span class="o">.</span><span class="na">retrieveSection</span><span class="o">(</span><span class="s">"invalid - file"</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">RecordedGrip</span><span class="o">&gt;</span> <span class="nf">retrieveSection</span><span class="o">(</span><span class="nc">String</span> <span class="n">sectionName</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// dummy return until we have a real implementation</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">RecordedGrip</span><span class="o">&gt;();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="step-2">Step 2</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">// Step 2: 이제 테스트는 통과한다.</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">RecordedGrip</span><span class="o">&gt;</span> <span class="nf">retrieveSection</span><span class="o">(</span><span class="nc">String</span> <span class="n">sectionName</span><span class="o">){</span>
  <span class="k">try</span><span class="o">{</span>
    <span class="nc">FileInputStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">sectionName</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">StorageException</span><span class="o">(</span><span class="s">"retrieval error"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">RecordedGrip</span><span class="o">&gt;();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="step-3">Step 3</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c1">// Step 3: Exception의 범위를 FileNotFoundException으로 줄여 정확히 어떤 Exception이 발생한지 체크하자.</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">RecordedGrip</span><span class="o">&gt;</span> <span class="nf">retrieveSection</span><span class="o">(</span><span class="nc">String</span> <span class="n">sectionName</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="nc">FileInputStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">sectionName</span><span class="o">);</span>
    <span class="n">stream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">StorageException</span><span class="o">(</span><span class="s">"retrieval error"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">RecordedGrip</span><span class="o">&gt;();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="미확인unchecked-예외를-사용하라">미확인(unchecked) 예외를 사용하라</h2>

<ul>
  <li>예전에는 메서드를 선언할 때는 메서드가 반환할 예외를 모두 열거 했다.</li>
  <li>예외 처리에 드는 비용 대비 이득을 생각해봐야 한다.</li>
  <li>확인된 예외를 사용하면 <strong>OCP(Open Closed Principle)를 위반한다.</strong>
    <ul>
      <li>확인된 예외를 던졌는데 catch 블록이 세 단계 위에 있다면 그 사이 메서드 모두가 선언부에 해당 예외를 정의해야 한다.</li>
      <li>다시 빌드한 다음 배포해야 한다.</li>
      <li>상위 레벨 메소드에서 하위 레벨 메소드의 디테일에 대해 알아야 하기 때문에 캠슐화 또한 깨진다.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">get</span><span class="o">(){</span>
	<span class="k">try</span><span class="o">{</span>
		
	<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InvalidGetException</span> <span class="n">e</span><span class="o">){</span>
		<span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">getById</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InvalidGetException</span> <span class="o">{</span>
	<span class="n">call</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InvalidGetException</span> <span class="o">{</span>
	<span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidGetException</span><span class="o">();</span> 
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="예외에-의미를-제공하라">예외에 의미를 제공하라</h2>

<p>호출 스택만으로 사용자가 의도를 파악하기 어려우므로 오류 메시지에 정보를 담아 예외와 함께 던져야 한다. 전후 상황을 충분히 덧붙이고 실패한 연산 이름과 실패 유형도 언급한다.</p>

<h2 id="호출자를-고려해-예외-클래스를-정의해라">호출자를 고려해 예외 클래스를 정의해라</h2>

<p>프로그래머는 오류를 정의할 때 <strong>오류를 잡아내는 방법</strong>을 고려해야한다.</p>

<p>외부 API의 다양한 예외를 직접 노출하지 않고 감싸기 기법을 통해 새로운 클래스를 만들어 캡슐화.</p>

<p>Bad👎 : 다른 종류의 예외를 처리 로직은 모두 같으므로 의미가 없음</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c1">// 외부 라이브러리가 던질 예외를 모두 잡아 낸다. </span>
<span class="c1">// 같은 에러 잡아 내는 코드가 많다. </span>
<span class="c1">// 변경하기 어렵다.</span>

<span class="nc">ACMEPort</span> <span class="n">port</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ACMEPort</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
<span class="k">try</span> <span class="o">{</span>
  <span class="n">port</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">DeviceResponseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">reportPortError</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
  <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"Device response exception"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ATM1212UnlockedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">reportPortError</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
  <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"Unlock exception"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">GMXError</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">reportPortError</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
  <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"Device response exception"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
  <span class="o">...</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Good👍 :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="c1">// 호출하는 라이브러리 API를 감싸면서 예외 유형 하나를 반환.</span>
<span class="c1">// Wrapper클래스 덕분에 의존성이 크게 감소.</span>

<span class="nc">LocalPort</span> <span class="n">port</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocalPort</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
<span class="k">try</span> <span class="o">{</span>
  <span class="n">port</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">PortDeviceFailure</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">reportError</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
  <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
  <span class="o">...</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalPort</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">ACMEPort</span> <span class="n">innerPort</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">LocalPort</span><span class="o">(</span><span class="kt">int</span> <span class="n">portNumber</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">innerPort</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ACMEPort</span><span class="o">(</span><span class="n">portNumber</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">open</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="n">innerPort</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">DeviceResponseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nf">PortDeviceFailure</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ATM1212UnlockedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nf">PortDeviceFailure</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">GMXError</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nf">PortDeviceFailure</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
  <span class="o">...</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="정상-흐름을-정의하라">정상 흐름을 정의하라.</h2>

<p>외부 API를 감싸 독자적인 예외를 던져 중단한 뒤 호출하는 코드에서</p>

<p>처리를 정의해 중단된 계산을 처리하는 것은 대게 적합하지만 중단이 적합하지 않은 경우도 있다.</p>

<p>이러한 경우 특수 사례 패턴(SPECIAL CASE PATTERN)을 적용해 개선한다.</p>

<p>특수 사례 패턴이란?</p>

<p>반환할 값이 없을 때 예외를 던지는 것이 아니라 기본 값을 반환</p>

<p>Bad👎</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// 식비비용 조회를 실패하면 일일 기본 식비를 총계에 더한다.</span>
<span class="c1">// 특수 상황을 처리할 필요가 없다면 더 코드는 간결해진다.</span>
<span class="k">try</span> <span class="o">{</span> 
  <span class="nc">MealExpenses</span> <span class="n">expenses</span> <span class="o">=</span> <span class="n">expenseReportDAO</span><span class="o">.</span><span class="na">getMeals</span><span class="o">(</span><span class="n">employee</span><span class="o">.</span><span class="na">getID</span><span class="o">());</span>
  <span class="n">m_total</span> <span class="o">+=</span> <span class="n">expenses</span><span class="o">.</span><span class="na">getTotal</span><span class="o">();</span> 
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">MealExpensesNotFound</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
   <span class="n">m_total</span> <span class="o">+=</span> <span class="n">getMealPerDiem</span><span class="o">();</span> 
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Good👍</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">// caller logic.</span>
<span class="nc">MealExpenses</span> <span class="n">expenses</span> <span class="o">=</span> <span class="n">expenseReportDAO</span><span class="o">.</span><span class="na">getMeals</span><span class="o">(</span><span class="n">employee</span><span class="o">.</span><span class="na">getID</span><span class="o">());</span>
<span class="n">m_total</span> <span class="o">+=</span> <span class="n">expenses</span><span class="o">.</span><span class="na">getTotal</span><span class="o">();</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PerDiemMealExpenses</span> <span class="kd">implements</span> <span class="nc">MealExpenses</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MEAL_EXPENSES_DEFAULT</span> <span class="o">=</span> <span class="mi">3000</span><span class="o">;</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getTotal</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// 기본값으로 일일 기본 식비를 반환</span>
		<span class="k">return</span> <span class="no">MEAL_EXPENSES_DEFAULT</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="null을-반환하지-마라">null을 반환하지 마라</h2>

<p>메서드가 null을 반환하면 해당 메서드를 사용하는 클라이언트는 null 체크 코드를 추가할 수 밖에 없다. 이것은 좋지 못한 습관이다. 이 과정에서 null 체크가 누락되면 버그로 이어지고, null 체크 코드는 아름답지 못하다. 특수 사례 객체를 통해 이러한 문제를 해결할 수 있다.</p>

<p>Bad👎</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerItem</span><span class="o">(</span><span class="nc">Item</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span> 
  <span class="k">if</span> <span class="o">(</span><span class="n">item</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">ItemRegistry</span> <span class="n">registry</span> <span class="o">=</span> <span class="n">peristentStore</span><span class="o">.</span><span class="na">getItemRegistry</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">registry</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">Item</span> <span class="n">existing</span> <span class="o">=</span> <span class="n">registry</span><span class="o">.</span><span class="na">getItem</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getID</span><span class="o">());</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">existing</span><span class="o">.</span><span class="na">getBillingPeriod</span><span class="o">().</span><span class="na">hasRetailOwner</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">existing</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">&gt;</span> <span class="n">employees</span> <span class="o">=</span> <span class="n">getEmployees</span><span class="o">();</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">employees</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span><span class="o">(</span><span class="nc">Employee</span> <span class="n">e</span> <span class="o">:</span> <span class="n">employees</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">totalPay</span> <span class="o">+=</span> <span class="n">e</span><span class="o">.</span><span class="na">getPay</span><span class="o">();</span>
    <span class="o">}</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Good👍</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">// 더 읽기 쉬운 코드.</span>
  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">&gt;</span> <span class="n">employees</span> <span class="o">=</span> <span class="n">getEmployees</span><span class="o">();</span>
  <span class="k">for</span><span class="o">(</span><span class="nc">Employee</span> <span class="n">e</span> <span class="o">:</span> <span class="n">employees</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">totalPay</span> <span class="o">+=</span> <span class="n">e</span><span class="o">.</span><span class="na">getPay</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">&gt;</span> <span class="nf">getEmployees</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span> <span class="o">..</span> <span class="n">there</span> <span class="n">are</span> <span class="n">no</span> <span class="n">employees</span> <span class="o">..</span> <span class="o">)</span>
      <span class="k">return</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">emptyList</span><span class="o">();</span>
    <span class="o">}</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="null을-전환하지-마라">null을 전환하지 마라</h2>

<p>메서드의 argument로 null을 전달하게 되면 메서드는 내부에서 null 체크 또는 assert를 이용하여 처리하는 로직을 추가할 수 밖에 없다. 이러한 로직을 통해 exception을 던지는 메서드가 되면 해당 메서드를 사용하는 쪽에서도 exception 처리를 추가해야 한다.</p>

<p>호출자가 넘기는 null을 처리하는 방법은 없다. 정책적으로 null을 넘기지 못하게 하는 것이 가장 합리적이다.</p>

<p>Bad👎</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c1">// Parameter에 null값이 들어오면 NullPointerException 발생.</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MetricsCalculator</span> <span class="o">{</span> 
  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">xProjection</span><span class="o">(</span><span class="nc">Point</span> <span class="n">p1</span><span class="o">,</span> <span class="nc">Point</span> <span class="n">p2</span><span class="o">)</span> <span class="o">{</span> 
    <span class="k">return</span> <span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">x</span> <span class="err">–</span> <span class="n">p1</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">*</span> <span class="mf">1.5</span><span class="o">;</span> 
  <span class="o">}</span> 
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Better</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MetricsCalculator</span> <span class="o">{</span> 
  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">xProjection</span><span class="o">(</span><span class="nc">Point</span> <span class="n">p1</span><span class="o">,</span> <span class="nc">Point</span> <span class="n">p2</span><span class="o">)</span> <span class="o">{</span> 
    <span class="k">if</span><span class="o">(</span><span class="n">p1</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">p2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
      <span class="k">throw</span> <span class="nf">InvalidArgumentException</span><span class="o">(</span><span class="s">"Invalid argument for MetricsCalculator.xProjection"</span><span class="o">);</span> 
    <span class="o">}</span> 
    <span class="k">return</span> <span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">x</span> <span class="err">–</span> <span class="n">p1</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">*</span> <span class="mf">1.5</span><span class="o">;</span> 
  <span class="o">}</span> 
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Good👍</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MetricsCalculator</span> <span class="o">{</span> 
  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">xProjection</span><span class="o">(</span><span class="nc">Point</span> <span class="n">p1</span><span class="o">,</span> <span class="nc">Point</span> <span class="n">p2</span><span class="o">)</span> <span class="o">{</span> 
    <span class="k">assert</span> <span class="n">p1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">:</span> <span class="s">"p1 should not be null"</span><span class="o">;</span>
    <span class="k">assert</span> <span class="n">p2</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">:</span> <span class="s">"p2 should not be null"</span><span class="o">;</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">x</span> <span class="err">–</span> <span class="n">p1</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">*</span> <span class="mf">1.5</span><span class="o">;</span> 
  <span class="o">}</span> 
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET