I"'#<p><strong>Union-Find</strong>는 대표적인 그래프 알고리즘으로 합집합 찾기라는 의미를 가졌다.</p>

<p>여러 개의 노드가 존재할 때 두 개의 노드를 선택해서, 현재 이 두 노드가 서로 같은 그래프에 속하는지 판별하는 알고리즘 이다.</p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0914/img1.png" /></p>

<p>위와 같이 모드 연결되지 않고 각자 자기 자신만을 집합의 원소로 가지고 있을 때는</p>

<p>모든 값이 자기 자신을 가리키도록 만든다.</p>

<p>표에서는 첫번째 행은 ‘노드번호’를 위미하고 두번째 행은 ‘부모 노드 번호’를 의미한다.</p>

<p>즉, 자신이 어떤한 부모에 포함되어 있는지를 의미한다.</p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0914/img2.png" /></p>

<p>1과 2가 연결이 되었을 때는 2번째 인덱스의 값에 ‘1’이 들어간다. 부모를 합칠 때는 일반적으로더 작은 값쪽으로 합친다.</p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0914/img3.png" /></p>

<p>2와 3도 연결이 되어있다면 1과 3은 부모가 각각 1과 2로 다르기 때문에 ‘부모 노드’만 보고는 한번에 파악할 수 없다. 그래서 재귀 함수가 사용된다.</p>

<p>3의 부모를 찾기 위해서 3이 가르키고 있는 2를 찾는다. 2의 부모가 1을 가리키고 있으므로 결과적으로 3의 부모는 1이 되는구나 라고 파악할 수 있다.</p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0914/img4.gif" /></p>

<p>Java Code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">//합집합 찾기</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UnionFind</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getParent</span><span class="o">(</span><span class="kt">int</span> <span class="n">parent</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">==</span> <span class="n">x</span><span class="o">){</span>
            <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]);</span> <span class="c1">//재귀 함수를 사용한다. </span>
    <span class="o">}</span>

    <span class="c1">//각 부모 노드를 합친다.</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">unionParent</span><span class="o">(</span><span class="kt">int</span> <span class="n">parent</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">a</span><span class="o">);</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//더 작은 쪽으로 합친다. </span>
            <span class="n">parent</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">parent</span><span class="o">[</span><span class="n">a</span><span class="o">]</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">//같은 부모 노드를 가지는지 확인한다.</span>
    <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">findParent</span><span class="o">(</span><span class="kt">int</span> <span class="n">parent</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">a</span><span class="o">);</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="o">){</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">parent</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">11</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="c1">//모든 값이 자기 자신을 가르키도록 만든다. </span>
        <span class="o">}</span>

        <span class="n">unionParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
        <span class="n">unionParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
        <span class="n">unionParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>
        <span class="n">unionParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">6</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">3</span><span class="o">));</span>

    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>출처 : <a href="https://m.blog.naver.com/ndb796/221230967614">17. Union-Find(합집합 찾기)</a></p>
:ET