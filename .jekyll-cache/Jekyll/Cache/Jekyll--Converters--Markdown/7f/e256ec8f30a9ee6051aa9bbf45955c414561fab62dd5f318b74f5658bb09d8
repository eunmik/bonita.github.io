I"j<p>스프링을 활용한 서버 개발시에는 <strong>일괄된 예외처리</strong>로 일관성 있는 코드 스타일을 유지 할 필요가 있다. 
try/catch로 처리할 경우에는 예외처리를 반복적으로 작성하다보니 코드 구조에 혼란을 일으키기도 하고 정상동작과 오류처리 동작을 뒤섞는다. 
반복된 예외처리를 피하기 위해서 Spring 3.2부터 @ControllerAdvice 어노테이션이 추가되었다.</p>

<h2 id="conctrolleradvice란">@ConctrollerAdvice란?</h2>

<p>@Controller나 @RestController에서 발생한 예외를 한 곳에서 관리하고 관리하고 처리할 수 있게 도와주는 어노테이션이다. 
직접 try/catch를 통해 예외를 처리하면 <strong>직접 처리한 것이 우선순위로</strong> 작동하게 된다.</p>

<p>예제 코드</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="nd">@Slf4j</span>
<span class="nd">@Order</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
<span class="nd">@ControllerAdvice</span><span class="o">(</span><span class="n">annotations</span> <span class="o">=</span> <span class="nc">RestController</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomExceptionHandler</span> <span class="kd">extends</span> <span class="nc">ResponseEntityExceptionHandler</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">ORDER</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		
		<span class="nd">@ResponseStatus</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">)</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">handleMissingServletRequestParameter</span>
            <span class="o">(</span><span class="nc">MissingServletRequestParameterException</span> <span class="n">ex</span><span class="o">,</span> <span class="nc">HttpHeaders</span> <span class="n">headers</span><span class="o">,</span> <span class="nc">HttpStatus</span> <span class="n">status</span><span class="o">,</span> <span class="nc">WebRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"MissingServletRequestParameterException"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
        <span class="nc">ExceptionResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ExceptionResponse</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">INVALID_INPUT_VALUE</span><span class="o">,</span> <span class="n">ex</span><span class="o">.</span><span class="na">getParameterName</span><span class="o">());</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">response</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">SQLException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="nd">@ResponseBody</span>
    <span class="kd">protected</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">ExceptionResponse</span><span class="o">&gt;</span> <span class="nf">handleSqlException</span><span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">){</span>
        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"SQLException"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="nc">ExceptionResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ExceptionResponse</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">SQL_EXCEPTION_VALUE</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getSQLState</span><span class="o">());</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">response</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">NullPointerException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="nd">@ResponseBody</span>
    <span class="kd">protected</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">ExceptionResponse</span><span class="o">&gt;</span> <span class="nf">handleNullPointerException</span><span class="o">(</span><span class="nc">NullPointerException</span> <span class="n">e</span><span class="o">){</span>
        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"NullPointerException"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="nc">ExceptionResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ExceptionResponse</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">NULL_POINTER_EXCEPTION_VALUE</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">response</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="nd">@Slf4j</span>
<span class="nd">@Order</span><span class="o">(</span><span class="nc">CustomExceptionHandler</span><span class="o">.</span><span class="na">ORDER</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
<span class="nd">@ControllerAdvice</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomGlobalExceptionHandler</span> <span class="o">{</span>
    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">protected</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">ExceptionResponse</span><span class="o">&gt;</span> <span class="nf">handleException</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
        <span class="nc">ExceptionResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ExceptionResponse</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">EXCEPTION_VALUE</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">response</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Exception은 다른 클래스로 빼준 이유는 같은 클래스에 정의하면 우선순위가 높은지 
Exception.class에 해당하는 메소드가 실행이 되어 세부 처리된 Exception handle에 관한 메소드들은 실행이 되지 않아서 Order를 낮게 주어서 다른 클래스로 빼주었다.</p>

<h2 id="통일된-json-객체">통일된 Json 객체</h2>

<p>Exception Response 객체는 항상 동일한 객체를 가져야한다. 그렇지 않으면 클라이언트에서 예외처리를 항상 동일한 로직으로 처리하기가 어렵다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="nd">@Getter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExceptionResponse</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">status</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">message</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">data</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">error</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ExceptionResponse</span><span class="o">(</span><span class="nc">ExceptionCode</span> <span class="n">status</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">.</span><span class="na">getCode</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">status</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">ExceptionResponse</span><span class="o">(</span><span class="kd">final</span> <span class="nc">ExceptionCode</span> <span class="n">status</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">data</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">.</span><span class="na">getCode</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">status</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">ExceptionResponse</span><span class="o">(</span><span class="kd">final</span> <span class="nc">ExceptionCode</span> <span class="n">status</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">data</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">error</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">.</span><span class="na">getCode</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">status</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">error</span> <span class="o">=</span> <span class="n">error</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="excception-code-정의">Excception Code 정의</h2>

<p>에러 코드는 enum 타입으로 한곳에서 관리한다. 
에러 코드가 전체적으로 흩어져 있을 경우에는 코드, 메시지의 중복을 방지 하기 어력고 전체적으로 관리하는것이 매우 어렵다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="nd">@Getter</span>
<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">ExceptionCode</span> <span class="o">{</span>
    <span class="no">NOT_FOUND_USER</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="s">"Not Found User"</span><span class="o">),</span>
    <span class="no">INVALID_INPUT_VALUE</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="s">"Invalid Input Value"</span><span class="o">),</span>
    <span class="no">SQL_EXCEPTION_VALUE</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span> <span class="s">"Sql Exception"</span><span class="o">),</span>
    <span class="no">EXCEPTION_VALUE</span><span class="o">(</span><span class="mi">400</span><span class="o">,</span> <span class="s">"Exception"</span><span class="o">),</span>
    <span class="no">NULL_POINTER_EXCEPTION_VALUE</span><span class="o">(</span><span class="mi">500</span><span class="o">,</span> <span class="s">"NullPointerException"</span><span class="o">),</span>
    <span class="no">IO_EXCEPTION_VALUE</span><span class="o">(</span><span class="mi">600</span><span class="o">,</span> <span class="s">"IOException"</span><span class="o">),</span>
    <span class="no">ILLEGAL_ARGUMENT_EXCEPTION_VALUE</span><span class="o">(</span><span class="mi">700</span><span class="o">,</span> <span class="s">"IllegalArgumentException"</span><span class="o">),</span>
    <span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">code</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">message</span><span class="o">;</span>

    <span class="nc">ExceptionCode</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">code</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">message</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">code</span> <span class="o">=</span> <span class="n">code</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>SQL 관련 에러 발생시 아래 처럼 나온다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
    </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="mi">300</span><span class="p">,</span><span class="w">
    </span><span class="nl">"message"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Sql Exception"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="s2">"42000"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"error"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>참고한 블로그</p>

<p><a href="https://niipoong.tistory.com/7">Spring Security + Exception 예외 처리(1)</a> 
<a href="https://cheese10yun.github.io/spring-guide-exception/">Spring Guide - Exception 전략</a></p>

<hr />

<h2 id="troubleshooting">TroubleShooting</h2>

<p>문제 : CustomExceptionHandler.java에 
MissingServletRequestParameterException 관한 method를 만들어 넣으면 서버 재시작할 때 아래와 같은 에러가 발생 한다.</p>

<div class="language-prolog highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="nv">Caused</span> <span class="ss">by</span><span class="o">:</span> <span class="ss">org</span><span class="p">.</span><span class="ss">springframework</span><span class="p">.</span><span class="ss">beans</span><span class="p">.</span><span class="nv">BeanInstantiationException</span><span class="o">:</span> 
<span class="nv">Failed</span> <span class="ss">to</span> <span class="ss">instantiate</span> <span class="p">[</span><span class="ss">org</span><span class="p">.</span><span class="ss">springframework</span><span class="p">.</span><span class="ss">web</span><span class="p">.</span><span class="ss">servlet</span><span class="p">.</span><span class="nv">HandlerExceptionResolver</span><span class="p">]</span><span class="o">:</span> 
<span class="nv">Factory</span> <span class="ss">method</span> <span class="ss">'handlerExceptionResolver'</span> <span class="ss">threw</span> <span class="ss">exception</span><span class="p">;</span> 
<span class="ss">nested</span> <span class="ss">exception</span> <span class="ss">is</span> <span class="ss">java</span><span class="p">.</span><span class="ss">lang</span><span class="p">.</span><span class="nv">IllegalStateException</span><span class="o">:</span> 
<span class="nv">Ambiguous</span> <span class="o">@</span><span class="nv">ExceptionHandler</span> <span class="ss">method</span> <span class="ss">mapped</span> <span class="ss">for</span> 
<span class="p">[</span><span class="ss">class</span> <span class="ss">org</span><span class="p">.</span><span class="ss">springframework</span><span class="p">.</span><span class="ss">web</span><span class="p">.</span><span class="ss">bind</span><span class="p">.</span><span class="nv">MissingServletRequestParameterException</span><span class="p">]</span><span class="o">:</span> 
<span class="p">{</span><span class="ss">public</span> <span class="ss">org</span><span class="p">.</span><span class="ss">springframework</span><span class="p">.</span><span class="ss">http</span><span class="p">.</span><span class="nv">ResponseEntity</span> <span class="ss">com</span><span class="p">.</span><span class="ss">argos_labs</span><span class="p">.</span><span class="ss">rpa</span><span class="p">.</span><span class="ss">la</span><span class="p">.</span><span class="ss">api</span><span class="p">.</span><span class="ss">controller</span><span class="p">.</span><span class="nv">CustomExceptionHandler</span><span class="p">.</span><span class="ss">handleMissingException</span><span class="p">(</span><span class="ss">org</span><span class="p">.</span><span class="ss">springframework</span><span class="p">.</span><span class="ss">web</span><span class="p">.</span><span class="ss">bind</span><span class="p">.</span><span class="nv">MissingServletRequestParameterException</span><span class="p">),</span> 

<span class="nv">Caused</span> <span class="ss">by</span><span class="o">:</span> <span class="ss">java</span><span class="p">.</span><span class="ss">lang</span><span class="p">.</span><span class="nv">IllegalStateException</span><span class="o">:</span> <span class="nv">Ambiguous</span> <span class="o">@</span><span class="nv">ExceptionHandler</span> <span class="ss">method</span> <span class="ss">mapped</span> <span class="ss">for</span> <span class="p">[</span><span class="ss">class</span> <span class="ss">org</span><span class="p">.</span><span class="ss">springframework</span><span class="p">.</span><span class="ss">web</span><span class="p">.</span><span class="ss">bind</span><span class="p">.</span><span class="nv">MissingServletRequestParameterException</span><span class="p">]</span><span class="o">:</span> <span class="p">{</span><span class="ss">public</span> <span class="ss">org</span><span class="p">.</span><span class="ss">springframework</span><span class="p">.</span><span class="ss">http</span><span class="p">.</span><span class="nv">ResponseEntity</span> <span class="ss">com</span><span class="p">.</span><span class="ss">argos_labs</span><span class="p">.</span><span class="ss">rpa</span><span class="p">.</span><span class="ss">la</span><span class="p">.</span><span class="ss">api</span><span class="p">.</span><span class="ss">controller</span><span class="p">.</span><span class="nv">CustomExceptionHandler</span><span class="p">.</span><span class="ss">handleMissingException</span><span class="p">(</span><span class="ss">org</span><span class="p">.</span><span class="ss">springframework</span><span class="p">.</span><span class="ss">web</span><span class="p">.</span><span class="ss">bind</span><span class="p">.</span><span class="nv">MissingServletRequestParameterException</span><span class="p">),</span> <span class="ss">public</span> <span class="ss">final</span> <span class="ss">org</span><span class="p">.</span><span class="ss">springframework</span><span class="p">.</span><span class="ss">http</span><span class="p">.</span><span class="nv">ResponseEntity</span> <span class="ss">org</span><span class="p">.</span><span class="ss">springframework</span><span class="p">.</span><span class="ss">web</span><span class="p">.</span><span class="ss">servlet</span><span class="p">.</span><span class="ss">mvc</span><span class="p">.</span><span class="ss">method</span><span class="p">.</span><span class="ss">annotation</span><span class="p">.</span><span class="nv">ResponseEntityExceptionHandler</span><span class="p">.</span><span class="ss">handleException</span><span class="p">(</span><span class="ss">java</span><span class="p">.</span><span class="ss">lang</span><span class="p">.</span><span class="nv">Exception</span><span class="p">,</span><span class="ss">org</span><span class="p">.</span><span class="ss">springframework</span><span class="p">.</span><span class="ss">web</span><span class="p">.</span><span class="ss">context</span><span class="p">.</span><span class="ss">request</span><span class="p">.</span><span class="nv">WebRequest</span><span class="p">)</span> <span class="ss">throws</span> <span class="ss">java</span><span class="p">.</span><span class="ss">lang</span><span class="p">.</span><span class="nv">Exception</span><span class="p">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>이유는 CustomExceptionHandler가 ResponseEntityExceptionHandler를 상속 받고 있는데 
그 클래스에 이미 MissingServletRequestParameterException에 대한 내용이 있기 때문이다.</p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0709/img1.png" />
<img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0709/img2.png" /></p>

<p>그래서 재정의가 필요한 것이다.</p>

<p>해결 :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">handleMissingServletRequestParameter</span>
            <span class="o">(</span><span class="nc">MissingServletRequestParameterException</span> <span class="n">ex</span><span class="o">,</span> <span class="nc">HttpHeaders</span> <span class="n">headers</span><span class="o">,</span> <span class="nc">HttpStatus</span> <span class="n">status</span><span class="o">,</span> <span class="nc">WebRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"MissingServletRequestParameterException"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
        <span class="nc">ExceptionResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ExceptionResponse</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">INVALID_INPUT_VALUE</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">response</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>

    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET