I"-<p>다익스트라 알고리즘은 하나의 정점에서 출발했을 때 다른 모든 정점의 최단 경로를 구하는 알고리즘이다. 하지만 만약에 ‘모든 정점’에서 ‘모든 정점’으로의 최단 경로를 구하고 싶다면 플로이드 와샬 알고리즘을 사용해야 한다.</p>

<p>다익스트라 알고리즘은 가장 적은 비용을 하나씩 선택해야 했다면 플로이드 와샬 알고리즘은 기본적으로 ‘거쳐가는 정점’을 기준으로 알고리즘을 수행한다는 특징이 있다.</p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0916/img1.PNG" /></p>

<p>위와 같은 그래프가 존재한다고 했을때 각각의 정점이 다른 정점으로 가는 비용을 이차원 배열로 초기화 했다.</p>

<p>이 테이블에서 의미하는 바는 ‘현재까지 계산된 최소비용’ 이다.</p>

<p>노드1을 거쳐가는 경우로 과정을 설명해 보자면</p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0916/img2.PNG" /></p>

<p>1을 거쳐가는 경우에는 총 6가지 공간만 갱신해주면 된다.</p>

<p>[2,3], [2,4], [3,2], [3,4],[4,2],[4,3]</p>

<p>자기자신인 경우와 1을 포함하고 있는 경우에는 갱신이 되지 않기 때문이다.</p>

<p>갱신할 때는 다음을 비교하는 방식이 반복 되는 것이다.</p>

<p><strong>X에서 Y로 가는 최소 비용 VS X에서 노드N으로 가는 비용 + 노드N에서 Y로 가는 비용</strong></p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0916/img3.PNG" /></p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0916/img4.PNG" /></p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0916/img5.PNG" /></p>

<p>[2,3]의 최소비용을 구할 때 [2,1] + [1,3]의 값과 [2,3]을 비교했을 때 더 작은 값으로 교체가 된다.</p>

<p>7 + INF &lt; 9  ⇒ FALSE, 그니깐 값은 [2,3]의 값이 그대로 유지된다.</p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0916/img6.PNG" /></p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0916/img7.PNG" /></p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0916/img8.PNG" /></p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0916/img9.PNG" /></p>

<p>[2,4]의 최소비용을 구할 때는</p>

<p>[2,1]의 비용과 [1,4]의 비용을 더한 값과 [2,4]의 값을 비교 해 보면</p>

<p>(7 + 8 &gt; INF ⇒ TRUE)</p>

<p>[2,1]의 비용과 [1,4]의 비용을 더한 값이 더 작기 때문에 갱신해 준다.</p>

<p>이렇게 반복 하다보면 아래처럼 결과 값이 나온다.</p>

<p><img src="https://eunmik.github.io/bonita.github.io/assets/img/2021/0916/img10.PNG" /></p>

<p>Java Code :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">floydWarshall</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="n">number</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="no">INF</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="no">INF</span><span class="o">,</span> <span class="mi">8</span><span class="o">},</span> <span class="o">{</span><span class="mi">7</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="no">INF</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="no">INF</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">4</span><span class="o">},</span> <span class="o">{</span><span class="no">INF</span><span class="o">,</span> <span class="no">INF</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">0</span><span class="o">}</span> <span class="o">};</span> 
        <span class="n">floydWarshall</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">number</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="no">INF</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">floydWarshall</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">a</span><span class="o">){</span>
        <span class="c1">//결과 그래프를 초기화 한다.</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">number</span><span class="o">][</span><span class="n">number</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
                <span class="n">d</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// K = 거쳐가는 노드</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">k</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
                    <span class="c1">//X에서 Y로 가는 최소 비용 VS X에서 노드N으로 가는 비용 + 노드N에서 Y로 가는 비용</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">d</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">k</span><span class="o">]</span> <span class="o">!=</span> <span class="no">INF</span> <span class="o">&amp;&amp;</span> <span class="n">d</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">!=</span> <span class="no">INF</span> <span class="o">&amp;&amp;</span> <span class="n">d</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">k</span><span class="o">]</span> <span class="o">+</span> <span class="n">d</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">d</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]){</span>
                        <span class="n">d</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">d</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">k</span><span class="o">]</span> <span class="o">+</span> <span class="n">d</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">//결과를 출력</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">d</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span><span class="s">" "</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>

    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>출처 : <a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=ndb796&amp;logNo=221234427842">24. 플로이드 와샬 알고리즘</a></p>
:ET